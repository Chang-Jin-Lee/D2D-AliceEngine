// --- Auto-generated type-casting code ---
/* Auto-generated: type-casting for replication */
else if (type == typeid(>).name()) {
    >* dstVal = reinterpret_cast<>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const >* srcVal = reinterpret_cast<const >*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(AnimationClip).name()) {
    AnimationClip* dstVal = reinterpret_cast<AnimationClip*>(reinterpret_cast<char*>(dst) + dstOffset);
    const AnimationClip* srcVal = reinterpret_cast<const AnimationClip*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(ComPtr<ID2D1SolidColorBrush>).name()) {
    ComPtr<ID2D1SolidColorBrush>* dstVal = reinterpret_cast<ComPtr<ID2D1SolidColorBrush>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const ComPtr<ID2D1SolidColorBrush>* srcVal = reinterpret_cast<const ComPtr<ID2D1SolidColorBrush>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(ComPtr<IDWriteTextFormat>).name()) {
    ComPtr<IDWriteTextFormat>* dstVal = reinterpret_cast<ComPtr<IDWriteTextFormat>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const ComPtr<IDWriteTextFormat>* srcVal = reinterpret_cast<const ComPtr<IDWriteTextFormat>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(ComPtr<IDWriteTextLayout>).name()) {
    ComPtr<IDWriteTextLayout>* dstVal = reinterpret_cast<ComPtr<IDWriteTextLayout>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const ComPtr<IDWriteTextLayout>* srcVal = reinterpret_cast<const ComPtr<IDWriteTextLayout>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(D2D1_SIZE_U).name()) {
    D2D1_SIZE_U* dstVal = reinterpret_cast<D2D1_SIZE_U*>(reinterpret_cast<char*>(dst) + dstOffset);
    const D2D1_SIZE_U* srcVal = reinterpret_cast<const D2D1_SIZE_U*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::EBoxType).name()) {
    Define::EBoxType* dstVal = reinterpret_cast<Define::EBoxType*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::EBoxType* srcVal = reinterpret_cast<const Define::EBoxType*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::EDrawType).name()) {
    Define::EDrawType* dstVal = reinterpret_cast<Define::EDrawType*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::EDrawType* srcVal = reinterpret_cast<const Define::EDrawType*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::ERenderLayer).name()) {
    Define::ERenderLayer* dstVal = reinterpret_cast<Define::ERenderLayer*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::ERenderLayer* srcVal = reinterpret_cast<const Define::ERenderLayer*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::EScriptGroup).name()) {
    Define::EScriptGroup* dstVal = reinterpret_cast<Define::EScriptGroup*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::EScriptGroup* srcVal = reinterpret_cast<const Define::EScriptGroup*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::ETextFormat).name()) {
    Define::ETextFormat* dstVal = reinterpret_cast<Define::ETextFormat*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::ETextFormat* srcVal = reinterpret_cast<const Define::ETextFormat*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::ETickingGroup).name()) {
    Define::ETickingGroup* dstVal = reinterpret_cast<Define::ETickingGroup*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::ETickingGroup* srcVal = reinterpret_cast<const Define::ETickingGroup*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::ETransformType).name()) {
    Define::ETransformType* dstVal = reinterpret_cast<Define::ETransformType*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::ETransformType* srcVal = reinterpret_cast<const Define::ETransformType*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Define::ParameterType).name()) {
    Define::ParameterType* dstVal = reinterpret_cast<Define::ParameterType*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Define::ParameterType* srcVal = reinterpret_cast<const Define::ParameterType*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(EventInfo).name()) {
    EventInfo* dstVal = reinterpret_cast<EventInfo*>(reinterpret_cast<char*>(dst) + dstOffset);
    const EventInfo* srcVal = reinterpret_cast<const EventInfo*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(FAABB).name()) {
    FAABB* dstVal = reinterpret_cast<FAABB*>(reinterpret_cast<char*>(dst) + dstOffset);
    const FAABB* srcVal = reinterpret_cast<const FAABB*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(FColor).name()) {
    FColor* dstVal = reinterpret_cast<FColor*>(reinterpret_cast<char*>(dst) + dstOffset);
    const FColor* srcVal = reinterpret_cast<const FColor*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(FVector2).name()) {
    FVector2* dstVal = reinterpret_cast<FVector2*>(reinterpret_cast<char*>(dst) + dstOffset);
    const FVector2* srcVal = reinterpret_cast<const FVector2*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(ObjectHandle).name()) {
    ObjectHandle* dstVal = reinterpret_cast<ObjectHandle*>(reinterpret_cast<char*>(dst) + dstOffset);
    const ObjectHandle* srcVal = reinterpret_cast<const ObjectHandle*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(SpriteInfo).name()) {
    SpriteInfo* dstVal = reinterpret_cast<SpriteInfo*>(reinterpret_cast<char*>(dst) + dstOffset);
    const SpriteInfo* srcVal = reinterpret_cast<const SpriteInfo*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(SpriteSheet).name()) {
    SpriteSheet* dstVal = reinterpret_cast<SpriteSheet*>(reinterpret_cast<char*>(dst) + dstOffset);
    const SpriteSheet* srcVal = reinterpret_cast<const SpriteSheet*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(T).name()) {
    T* dstVal = reinterpret_cast<T*>(reinterpret_cast<char*>(dst) + dstOffset);
    const T* srcVal = reinterpret_cast<const T*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(Transform).name()) {
    Transform* dstVal = reinterpret_cast<Transform*>(reinterpret_cast<char*>(dst) + dstOffset);
    const Transform* srcVal = reinterpret_cast<const Transform*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(WeakObjectPtr<TransformComponent>).name()) {
    WeakObjectPtr<TransformComponent>* dstVal = reinterpret_cast<WeakObjectPtr<TransformComponent>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const WeakObjectPtr<TransformComponent>* srcVal = reinterpret_cast<const WeakObjectPtr<TransformComponent>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(bool).name()) {
    bool* dstVal = reinterpret_cast<bool*>(reinterpret_cast<char*>(dst) + dstOffset);
    const bool* srcVal = reinterpret_cast<const bool*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(char).name()) {
    char* dstVal = reinterpret_cast<char*>(reinterpret_cast<char*>(dst) + dstOffset);
    const char* srcVal = reinterpret_cast<const char*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(class).name()) {
    class* dstVal = reinterpret_cast<class*>(reinterpret_cast<char*>(dst) + dstOffset);
    const class* srcVal = reinterpret_cast<const class*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(delete).name()) {
    delete* dstVal = reinterpret_cast<delete*>(reinterpret_cast<char*>(dst) + dstOffset);
    const delete* srcVal = reinterpret_cast<const delete*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(double).name()) {
    double* dstVal = reinterpret_cast<double*>(reinterpret_cast<char*>(dst) + dstOffset);
    const double* srcVal = reinterpret_cast<const double*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(float).name()) {
    float* dstVal = reinterpret_cast<float*>(reinterpret_cast<char*>(dst) + dstOffset);
    const float* srcVal = reinterpret_cast<const float*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(float>).name()) {
    float>* dstVal = reinterpret_cast<float>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const float>* srcVal = reinterpret_cast<const float>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(float>>).name()) {
    float>>* dstVal = reinterpret_cast<float>>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const float>>* srcVal = reinterpret_cast<const float>>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(int).name()) {
    int* dstVal = reinterpret_cast<int*>(reinterpret_cast<char*>(dst) + dstOffset);
    const int* srcVal = reinterpret_cast<const int*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(long).name()) {
    long* dstVal = reinterpret_cast<long*>(reinterpret_cast<char*>(dst) + dstOffset);
    const long* srcVal = reinterpret_cast<const long*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(long double).name()) {
    long double* dstVal = reinterpret_cast<long double*>(reinterpret_cast<char*>(dst) + dstOffset);
    const long double* srcVal = reinterpret_cast<const long double*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(long long).name()) {
    long long* dstVal = reinterpret_cast<long long*>(reinterpret_cast<char*>(dst) + dstOffset);
    const long long* srcVal = reinterpret_cast<const long long*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(return).name()) {
    return* dstVal = reinterpret_cast<return*>(reinterpret_cast<char*>(dst) + dstOffset);
    const return* srcVal = reinterpret_cast<const return*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(short).name()) {
    short* dstVal = reinterpret_cast<short*>(reinterpret_cast<char*>(dst) + dstOffset);
    const short* srcVal = reinterpret_cast<const short*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::shared_ptr<ID2D1Bitmap1>).name()) {
    std::shared_ptr<ID2D1Bitmap1>* dstVal = reinterpret_cast<std::shared_ptr<ID2D1Bitmap1>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::shared_ptr<ID2D1Bitmap1>* srcVal = reinterpret_cast<const std::shared_ptr<ID2D1Bitmap1>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::string).name()) {
    std::string* dstVal = reinterpret_cast<std::string*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::string* srcVal = reinterpret_cast<const std::string*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::unique_ptr<AnimationClip>>).name()) {
    std::unique_ptr<AnimationClip>>* dstVal = reinterpret_cast<std::unique_ptr<AnimationClip>>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::unique_ptr<AnimationClip>>* srcVal = reinterpret_cast<const std::unique_ptr<AnimationClip>>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::unique_ptr<SpriteSheet>).name()) {
    std::unique_ptr<SpriteSheet>* dstVal = reinterpret_cast<std::unique_ptr<SpriteSheet>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::unique_ptr<SpriteSheet>* srcVal = reinterpret_cast<const std::unique_ptr<SpriteSheet>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::vector<WeakObjectPtr<TransformComponent>>).name()) {
    std::vector<WeakObjectPtr<TransformComponent>>* dstVal = reinterpret_cast<std::vector<WeakObjectPtr<TransformComponent>>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::vector<WeakObjectPtr<TransformComponent>>* srcVal = reinterpret_cast<const std::vector<WeakObjectPtr<TransformComponent>>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::vector<std::shared_ptr<ID2D1Bitmap1>>).name()) {
    std::vector<std::shared_ptr<ID2D1Bitmap1>>* dstVal = reinterpret_cast<std::vector<std::shared_ptr<ID2D1Bitmap1>>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::vector<std::shared_ptr<ID2D1Bitmap1>>* srcVal = reinterpret_cast<const std::vector<std::shared_ptr<ID2D1Bitmap1>>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::vector<std::wstring>).name()) {
    std::vector<std::wstring>* dstVal = reinterpret_cast<std::vector<std::wstring>*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::vector<std::wstring>* srcVal = reinterpret_cast<const std::vector<std::wstring>*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::wostringstream).name()) {
    std::wostringstream* dstVal = reinterpret_cast<std::wostringstream*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::wostringstream* srcVal = reinterpret_cast<const std::wostringstream*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(std::wstring).name()) {
    std::wstring* dstVal = reinterpret_cast<std::wstring*>(reinterpret_cast<char*>(dst) + dstOffset);
    const std::wstring* srcVal = reinterpret_cast<const std::wstring*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(unsigned char).name()) {
    unsigned char* dstVal = reinterpret_cast<unsigned char*>(reinterpret_cast<char*>(dst) + dstOffset);
    const unsigned char* srcVal = reinterpret_cast<const unsigned char*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(unsigned int).name()) {
    unsigned int* dstVal = reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(dst) + dstOffset);
    const unsigned int* srcVal = reinterpret_cast<const unsigned int*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(unsigned long).name()) {
    unsigned long* dstVal = reinterpret_cast<unsigned long*>(reinterpret_cast<char*>(dst) + dstOffset);
    const unsigned long* srcVal = reinterpret_cast<const unsigned long*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(unsigned long long).name()) {
    unsigned long long* dstVal = reinterpret_cast<unsigned long long*>(reinterpret_cast<char*>(dst) + dstOffset);
    const unsigned long long* srcVal = reinterpret_cast<const unsigned long long*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(unsigned short).name()) {
    unsigned short* dstVal = reinterpret_cast<unsigned short*>(reinterpret_cast<char*>(dst) + dstOffset);
    const unsigned short* srcVal = reinterpret_cast<const unsigned short*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}
else if (type == typeid(wchar_t).name()) {
    wchar_t* dstVal = reinterpret_cast<wchar_t*>(reinterpret_cast<char*>(dst) + dstOffset);
    const wchar_t* srcVal = reinterpret_cast<const wchar_t*>(reinterpret_cast<const char*>(src) + srcOffset);
    *dstVal = *srcVal;
}